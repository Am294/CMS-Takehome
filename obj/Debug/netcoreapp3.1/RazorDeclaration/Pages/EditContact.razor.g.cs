#pragma checksum "C:\Users\7339R\Documents\Epitec\CMS\Pages\EditContact.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "cde7a63b2689b741811cbf6e32b391c3a735e45b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace CMS.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using CMS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using CMS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using CMS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\7339R\Documents\Epitec\CMS\_Imports.razor"
using CMS.DBCommands;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\7339R\Documents\Epitec\CMS\Pages\EditContact.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/edit/{ContactId:int}")]
    public partial class EditContact : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 51 "C:\Users\7339R\Documents\Epitec\CMS\Pages\EditContact.razor"
       
    /// <summary>
    /// Id of contact to edit
    /// </summary>
    [Parameter]
    public int ContactId { get; set; }

    /// <summary>
    /// The <see cref="ContactContext"/> for database access.
    /// </summary>
    private ContactContext Context { get; set; }

    /// <summary>
    /// Contact being edited
    /// </summary>
    private Contact Contact { get; set; }

    /// <summary>
    /// Database version when concurrency issues exist
    /// </summary>
    private Contact DbContact { get; set; }

    /// <summary>
    /// Avoid concurrent requests
    /// </summary>
    private bool Busy;

    /// <summary>
    /// An error occurred in the update
    /// </summary>
    private bool Error;

    /// <summary>
    /// A concurrency error needs resolution
    /// </summary>
    private bool ConcurrencyError;

    /// <summary>
    /// Error message
    /// </summary>
    private string ErrorMessage = string.Empty;



    /// <summary>
    /// Start it up
    /// </summary>
    /// <returns>Task</returns>
    #region snippet2
    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            Context = DbFactory.CreateDbContext();
            Contact = await Context.Contacts
                .SingleOrDefaultAsync(c => c.Id == ContactId);
        }
        finally
        {
            Busy = false;
        }

        await base.OnInitializedAsync();
    }
    #endregion

    /// <summary>
    /// Result of form validation
    /// </summary>
    /// <param name="success">Success when model is valid</param>
    /// <returns>Task</returns>
    private async Task ValidationResultAsync(bool success)
    {
        if (Busy)
        {
            return;
        }

        if (!success)
        {
            // still need to edit model
            Error = false;
            ConcurrencyError = false;
            return;
        }

        Busy = true; // async
        try
        {
            await Context.SaveChangesAsync();
            EditSuccessState.Success = true;
            // go to view to see the record
            Nav.NavigateTo($"/");
        }
        catch (DbUpdateConcurrencyException dbex)
        {
            EditSuccessState.Success = false;

            // concurrency issues!
            ConcurrencyError = true;

            // get values from database
            var dbValues = dbex.Entries[0].GetDatabaseValues();

            if (dbValues == null)
            {
                // deleted - show contact not found
                Nav.NavigateTo($"/");
                return;
            }

            // bind to show labels on form
            DbContact = (Contact)dbValues.ToObject();

            // move to original so second submit works (unless there is another concurrent edit)
            dbex.Entries[0].OriginalValues.SetValues(dbValues);
            Error = false;
            Busy = false;
        }
        catch (Exception ex)
        {
            EditSuccessState.Success = false;
            // unknown exception
            Error = true;
            ErrorMessage = ex.Message;
            Busy = false;
        }
    }

    /// <summary>
    /// Bail out!
    /// </summary>
    private void Cancel()
    {
        Busy = true;
        Nav.NavigateTo($"/");
    }

    /// <summary>
    /// Implement <see cref="IDisposable"/>.
    /// </summary>
    #region snippet1
    public void Dispose()
    {
        Context.Dispose();
    }
    #endregion


     #pragma warning disable 1998
    async Task Foo() {}
    #pragma warning restore 1998

    public bool confirmDelete = false;
   
 
    //Makes delete pop up appear
    private void RequestDeleteBox()
    {
       confirmDelete = true;
    }
    

    //Deletes contact on true else removes confirmDelete box
     private async Task ConfirmAsync(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteContactAsync();
            Nav.NavigateTo($"/");
        }
        else
        {
            confirmDelete = false;
        }
    }
    

    //Deletes contact
    private async Task DeleteContactAsync()
    {
        using var context = DbFactory.CreateDbContext();

        var contact = context.Contacts.Find(ContactId);

        if (contact != null)
        {
            context.Contacts.Remove(contact);
            await context.SaveChangesAsync();
        }


    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EditSuccess EditSuccessState { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Nav { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IDbContextFactory<ContactContext> DbFactory { get; set; }
    }
}
#pragma warning restore 1591
