@page "/"

@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ContactContext> DbFactory
@inject Commands DBCommands

<h1>Contacts</h1>
<div class="container-fluid contacts-grid">
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-5">
                @if(sortType == "last"){
                    <button @onclick="toggleSortType" style="margin-bottom:1%" class="buttonHover">
                        Sorting by Last Name
                    </button>
                }

                else{
                   <button @onclick="toggleSortType" style="margin-bottom:1%" class="buttonHover">
                        Sorting by First Name
                    </button> 
                }        
                
            </div>
            <div class="col-5" style="text-align: right">
                <a href="add">
                    <button class="buttonHover" style="margin-bottom:1%">Add Contact</button>
                </a>
            </div>
        </div>
        <div class="row contact-header">
            <div class="col-2">
                First Name
            </div>
            <div class="col-2">
                Last Name
            </div>
            <div class="col-2">
                BirthDate
            </div>
            <div class="col-2">
                Phone No.
            </div>
            <div class="col-2">
                Action
            </div>
        </div>

        
        @if (Contacts != null && Contacts.Count == 0)
        {
            <div class="row">
                <div class="col-12 alert alert-warning">
                    No contacts found.
                </div>
            </div>
        }
        @if (Contacts != null)
        {
            @foreach (var contact in Contacts)
            {
                <div class="row contact-detail hoverMe">
                    <div class="col-2">@contact.FirstName</div>
                    <div class="col-2">@contact.LastName</div>
                    <div class="col-2">@contact.BirthDate.ToShortDateString()</div>
                    <div class="col-2">@contact.Phone</div>
                    <div class="col-2">
                         <a href="edit/@contact.Id">
                            Edit/View
                        </a>
                    </div>
                    <div class="col-2 skipMe"></div>
                </div>
            }
        }
    </div>

@code {
   

    private string sortType = "last";

    private async void toggleSortType(){
        sortType = sortType == "last" ? "first": "last";
        await ReloadAsync();
    }
    protected override async Task OnInitializedAsync(){
        await ReloadAsync();
    }
    private ICollection<Contact> Contacts { get; set; }

        
    
    /// <summary>
    /// Reload page based on filters and paging controls.
    /// </summary>
    /// <returns>A <see cref="Task"/>.</returns>
    private async Task ReloadAsync()
    {
       
        Contacts = null;

        using var context = DbFactory.CreateDbContext();
        

         //run the query to load the current page
        Contacts = await DBCommands.FetchAsync(context.Contacts.AsQueryable(), sortType);



    }

    
    
}







